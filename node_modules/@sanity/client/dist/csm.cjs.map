{"version":3,"file":"csm.cjs","sources":["../src/csm/applySourceDocuments.ts","../src/csm/resolvedKeyedSourcePath.ts","../src/csm/resolveEditUrl.ts"],"sourcesContent":["import {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport * as paths from './studioPath'\nimport type {\n  Any,\n  ApplySourceDocumentsUpdateFunction,\n  ContentSourceMap,\n  ContentSourceMapDocuments,\n  Path,\n  SanityDocument,\n} from './types'\nimport {walkMap} from './walkMap'\n\nconst defaultUpdateFunction = <T = unknown>(changed: T): T => changed\n\n/**\n * Optimistically applies source documents to a result, using the content source map to trace fields.\n * Can be used to apply mutations to documents being edited in a Studio, or any mutation on Content Lake, to a result with extremely low latency.\n * @alpha\n */\nexport function applySourceDocuments<Result = unknown>(\n  result: Result,\n  resultSourceMap: ContentSourceMap | undefined,\n  getCachedDocument: (\n    sourceDocument: ContentSourceMapDocuments[number],\n  ) => SanityDocument | undefined,\n  updateFn: ApplySourceDocumentsUpdateFunction = defaultUpdateFunction,\n): Result {\n  if (!resultSourceMap) return result\n\n  return walkMap(JSON.parse(JSON.stringify(result)), (value, path) => {\n    const resolveMappingResult = resolveMapping(path, resultSourceMap)\n    if (!resolveMappingResult) {\n      // console.warn('no mapping for path', path)\n      return value\n    }\n\n    const {mapping, pathSuffix} = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument = resultSourceMap.documents[mapping.source.document]\n    const sourcePath = resultSourceMap.paths[mapping.source.path]\n\n    if (sourceDocument) {\n      const cachedDocument = getCachedDocument(sourceDocument)\n      if (!cachedDocument) {\n        return value\n      }\n\n      const parsedPath = parseJsonPath(sourcePath + pathSuffix)\n      const changedValue = cachedDocument\n        ? paths.get<Result[keyof Result]>(cachedDocument, paths.toString(parsedPath as Path), value)\n        : value\n      return value === changedValue\n        ? value\n        : updateFn<Result[keyof Result]>(changedValue as Any, {\n            cachedDocument,\n            previousValue: value as Result[keyof Result],\n            sourceDocument,\n            sourcePath: parsedPath,\n          })\n    }\n\n    return value\n  }) as Result\n}\n","import {jsonPath, parseJsonPath} from './jsonPath'\nimport type {ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolvedKeyedSourcePath(options: {\n  keyedResultPath: ContentSourceMapParsedPath\n  pathSuffix?: string\n  sourceBasePath: string\n}): ContentSourceMapParsedPath {\n  const {keyedResultPath, pathSuffix, sourceBasePath} = options\n\n  const inferredResultPath = pathSuffix === undefined ? [] : parseJsonPath(pathSuffix)\n\n  const inferredPath = keyedResultPath.slice(keyedResultPath.length - inferredResultPath.length)\n\n  const inferredPathSuffix = inferredPath.length ? jsonPath(inferredPath).slice(1) : ''\n\n  return parseJsonPath(sourceBasePath + inferredPathSuffix)\n}\n","import {createEditUrl} from './createEditUrl'\nimport {studioPathToJsonPath} from './jsonPath'\nimport {resolveEditInfo} from './resolveEditInfo'\nimport type {ResolveEditUrlOptions} from './types'\n\n/** @alpha */\nexport function resolveEditUrl(\n  options: ResolveEditUrlOptions,\n): ReturnType<typeof createEditUrl> | undefined {\n  const {resultSourceMap, studioUrl} = options\n  const resultPath = studioPathToJsonPath(options.resultPath)\n\n  const editInfo = resolveEditInfo({\n    resultPath,\n    resultSourceMap,\n    studioUrl,\n  })\n  if (!editInfo) {\n    return undefined\n  }\n\n  return createEditUrl(editInfo)\n}\n"],"names":["defaultUpdateFunction","changed","applySourceDocuments","result","resultSourceMap","getCachedDocument","updateFn","walkMap","JSON","parse","stringify","value","path","resolveMappingResult","resolveMapping","mapping","pathSuffix","type","source","sourceDocument","documents","document","sourcePath","paths","cachedDocument","parsedPath","parseJsonPath","changedValue","paths.get","paths.toString","toString","previousValue","resolvedKeyedSourcePath","options","keyedResultPath","sourceBasePath","inferredResultPath","inferredPath","slice","length","inferredPathSuffix","jsonPath","resolveEditUrl","studioUrl","resultPath","studioPathToJsonPath","editInfo","resolveEditInfo","createEditUrl"],"mappings":"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"}